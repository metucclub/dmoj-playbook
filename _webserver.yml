- hosts: webserver

  vars:
    HOME: "{{ ansible_env.HOME }}"
    APP_DIR: "{{ HOME }}/lopamp"
    VENV_DIR: "{{ APP_DIR }}/ENV"
    db_passwd: "{{ lookup('password', 'auth/db_passwd.txt') }}"
    django_secret_key: "{{ lookup('password', 'auth/django_secret_key.txt length=50') }}"

  vars_files:
    - _vars.yml

  tasks:
    - name: add gpg key for nodejs
      become: yes
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present

    - name: be able to add apt repositories
      become: yes
      apt:
        name: apt-transport-https

    - name: add apt repository for nodejs
      become: yes
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_10.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

    - name: install packages
      become: yes
      apt:
        name: "{{ packages }}"
        update_cache: yes
        cache_valid_time: 3600
      vars:
        packages:
        - git
        - gcc
        - g++
        - make
        - python-dev
        - nodejs
        - libxml2-dev
        - libxslt1-dev
        - zlib1g-dev
        - ruby-sass
        - gettext
        - curl
        - python-pip
        - mysql-server
        - default-libmysqlclient-dev
        - python-mysqldb
        - nginx

    - name: dmoj's mysql database should exist(with 3 byte utf8 :( )
      become: yes
      mysql_db:
        name: dmoj
        encoding: utf8
        state: present

    - name: which should belong to user dmoj
      become: yes
      mysql_user:
        name: dmoj
        priv: "dmoj.*:ALL"
        password: "{{ db_passwd }}"

    - name: clone our fork of dmoj
      git:
        repo: "https://github.com/metucclub/lopamp"
        dest: "{{ APP_DIR }}"

    - name: install virtualenv with pip
      become: yes
      pip:
        name: virtualenv

    - name: install gunicorn in the virtualenv(pip will create it)
      pip:
        name: gunicorn
        virtualenv: "{{ VENV_DIR }}"

    - name: install dmoj's dependencies in the virtualenv(coroutine 1)
      pip:
        requirements: "{{ APP_DIR }}/requirements.txt"
        virtualenv: "{{ VENV_DIR }}"
      async: 10000
      poll: 0
      register: dmoj_deps

    - name: install npm modules for event server(--no-save because it randomly places a package.json)
      npm:
        executable: /usr/bin/npm --no-save
        path: "{{ APP_DIR }}"

    - name: install pleeease-cli (--unsafe-perm because installing node-sass globally is buggy)
      become: yes
      npm:
        executable: /usr/bin/npm --unsafe-perm=true
        name: pleeease-cli
        global: yes
        production: yes

    - name: write dmoj's local settings config
      template:
        src: tpl/local_settings.py.j2
        dest: "{{ APP_DIR }}/dmoj/local_settings.py"

    - name: write service file for dmoj_site
      become: yes
      template:
        src: tpl/dmoj_site.service.j2
        dest: /etc/systemd/system/dmoj_site.service

    - name: write service file for bridged
      become: yes
      template:
        src: tpl/bridged.service.j2
        dest: /etc/systemd/system/bridged.service

    - name: write service file for wsevent
      become: yes
      template:
        src: tpl/wsevent.service.j2
        dest: /etc/systemd/system/wsevent.service

    - name: write event server's own config
      template:
        src: tpl/config.js.j2
        dest: "{{ APP_DIR }}/websocket/config.js"

    - name: write nginx config
      become: yes
      template:
        src: tpl/lopamp.conf.j2
        dest: /etc/nginx/conf.d/lopamp.conf

    - name: wait for dmoj's dependencies to finish installing(coroutine 1)
      async_status:
        jid: "{{ dmoj_deps.ansible_job_id }}"
      register: r
      until: r.finished
      retries: 60

    - name: generate and collect static assets(coroutine 2)
      shell: |
        {{ APP_DIR }}/make_style.sh &&
        {{ VENV_DIR }}/bin/python {{ APP_DIR }}/manage.py compilemessages &&
        {{ VENV_DIR }}/bin/python {{ APP_DIR }}/manage.py compilejsi18n &&
        {{ VENV_DIR }}/bin/python {{ APP_DIR }}/manage.py collectstatic --no-input
      async: 10000
      poll: 0
      register: gen_static

    - name: restart nginx
      become: yes
      systemd:
        name: nginx
        state: restarted

    - name: do the database migrations
      command: "{{ VENV_DIR }}/bin/python {{ APP_DIR }}/manage.py migrate --noinput"

    - name: write initial fixture with judge info
      template:
        src: tpl/initial.json.j2
        dest: "{{ APP_DIR }}/judge/fixtures/initial.json"

    - name: load initial fixture into django
      command: "{{ VENV_DIR }}/bin/python {{ APP_DIR }}/manage.py loaddata initial"

    - name: restart dmoj services dmoj_site, bridged, wsevent
      become: yes
      systemd:
        name: "{{ item }}"
        state: restarted
        daemon_reload: yes
      with_items:
        - dmoj_site
        - bridged
        - wsevent
      
    - name: wait for static assets to finish generating(coroutine 2)
      async_status:
        jid: "{{ gen_static.ansible_job_id }}"
      register: r
      until: r.finished
      retries: 60
